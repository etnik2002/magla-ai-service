import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import fs from 'fs-extra';
import { fileURLToPath } from 'url';
import path from 'path';
import { exec } from 'child_process';
import util from 'util';
import githubService from './services/githubService.js';
import { createAndDeploy } from './services/vercelService.js';

// Import OpenAI library
import { OpenAI } from 'openai';

// Initialize OpenAI client with Deepseek API Key
const openai = new OpenAI({
    apiKey: "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", // Use your Deepseek API Key
});

const execPromise = util.promisify(exec);

const app = express();
app.use(express.json());

app.post("/create-project", async (req, res) => {
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    let projectPath = '';

    try {
        const { project_name, default_language, domain, primary_color, secondary_color, button_color } = req.body;
        if (!project_name) {
            return res.status(400).json({ error: 'Missing required field: project_name' });
        }
        const projectBaseName = project_name.trim().replace(/\s+/g, '-').toLowerCase();
        const timestamp = Date.now();
        const folderName = `${projectBaseName}-${timestamp}`;
        projectPath = path.join(__dirname, '..', 'generated_projects', folderName);
        const srcPath = path.join(projectPath, 'src');
        const dataPath = path.join(srcPath, 'data');

        console.log(`Creating project directory: ${projectPath}`);
        await fs.ensureDir(projectPath);

        const command = `npx create-vite@latest . --template react --yes`;
        console.log(`Running Vite creation command in ${projectPath}: ${command}`);
        try {
            await execPromise(command, { cwd: projectPath });
            console.log("Vite project structure created.");
        } catch (viteError) {
            console.error("Error running 'npm create vite':", viteError);
            await fs.remove(projectPath);
            throw new Error(`Failed to create Vite project: ${viteError.message}`);
        }

        console.log(`Creating data directory: ${dataPath}`);
        await fs.ensureDir(dataPath);

        const files = [
            { name: 'categories.json', content: JSON.stringify(req.body.categories || [], null, 2) },
            { name: 'products.json', content: JSON.stringify(req.body.products || [], null, 2) },
            {
                name: 'web_template.json',
                content: JSON.stringify({
                    "app_name": projectBaseName,
                    "default_language": default_language || "en",
                    "domain": domain || `${projectBaseName}.example.com`,
                    "primary_color": primary_color || "#FFFFFF",
                    "secondary_color": secondary_color || "#000000",
                    "button_color": button_color || "#007bff"
                }, null, 2)
            }
        ];

        console.log("Writing data files...");
        for (const file of files) {
            const filePath = path.join(dataPath, file.name);
            await fs.writeFile(filePath, file.content, 'utf8');
            console.log(` - Created ${file.name}`);
        }

        const projectType = req.body.project_type || 'general';
        const appJsxPath = path.join(projectPath, 'src', 'App.jsx');

        const template_file_string = fs.readFileSync('./ui-templates.js/ecommerce.txt', 'utf-8')
        const prompt = `
            this is our actual code : ${template_file_string}
            what i want you to do is just to make some adjustments: 
            - this is the name of the company : ${req.body.company_name}
            - these are contact info : ${req.body.email}, ${req.body.phone}
            - this is address : ${req.body.address}

            add these data where its needed in the website and give me the complete code
            write only the react code, no other things, i want only the react code so i can directly add to the file
        `;

        try {
            // Using OpenAI client to interact with Deepseek API
            const result = await openai.chat.completions.create({
                model: "o3-mini", // OpenAI model; Deepseek might use the same model
                messages: [{ role: "user", content: prompt }]
            });

            const rawText = result.choices[0].message.content.trim();
            const cleanedCode = rawText.replace(/^```(?:jsx)?|```$/g, '').trim();

            if (!rawText) throw new Error('No JSX code generated by Deepseek.');

            await fs.writeFile(appJsxPath, cleanedCode, 'utf8');
            console.log("Custom App.jsx written based on project_type.");
        } catch (aiErr) {
            console.error("Error in generating App.jsx:", aiErr);
            throw new Error("Failed to generate customized App.jsx");
        }

        const repoName = `${projectBaseName}-site-${timestamp.toString().slice(-5)}`;
        console.log(`Creating GitHub repository: ${repoName}`);
        const githubRepo = await githubService.createRepoWithTokenAuth(repoName);
        console.log(`GitHub repository created: ${githubRepo.html_url}`);

        console.log("Initializing local repository and pushing to GitHub...");
        await githubService.initializeRepository(projectPath, repoName);
        console.log("Successfully initialized and pushed to GitHub main branch.");

        console.log("Creating Vercel project and triggering deployment...");
        const deploymentResult = await createAndDeploy(githubRepo.html_url);
        console.log("Vercel deployment process finished.");
        console.log("Deployment Result:", deploymentResult);

        return res.status(201).json({
            message: 'Project creation, GitHub push, and Vercel deployment initiated successfully.',
            repository_url: githubRepo.html_url,
            vercel_project_name: deploymentResult.projectName,
            deployment_status: deploymentResult.status,
            live_url: deploymentResult.url,
            local_project_path: projectPath
        });

    } catch (error) {
        console.error("Error during /create-project:", error);

        if (projectPath) {
            try {
                console.log(`Attempting to clean up directory: ${projectPath}`);
                await fs.remove(projectPath);
                console.log("Cleanup successful.");
            } catch (cleanupError) {
                console.error(`Failed to clean up directory ${projectPath}:`, cleanupError);
            }
        }

        return res.status(500).json({
            error: 'Project creation failed.',
            details: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
