import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export declare const CreateCustomEnvironmentType: {
    readonly Equals: "equals";
    readonly StartsWith: "startsWith";
    readonly EndsWith: "endsWith";
};
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export type CreateCustomEnvironmentType = ClosedEnum<typeof CreateCustomEnvironmentType>;
/**
 * How we want to determine a matching branch. This is optional.
 */
export type BranchMatcher = {
    /**
     * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
     */
    type: CreateCustomEnvironmentType;
    /**
     * Git branch name or portion thereof.
     */
    pattern: string;
};
export type CreateCustomEnvironmentRequestBody = {
    /**
     * The slug of the custom environment to create.
     */
    slug?: string | undefined;
    /**
     * Description of the custom environment. This is optional.
     */
    description?: string | undefined;
    /**
     * How we want to determine a matching branch. This is optional.
     */
    branchMatcher?: BranchMatcher | undefined;
    /**
     * Where to copy environment variables from. This is optional.
     */
    copyEnvVarsFrom?: string | undefined;
};
export type CreateCustomEnvironmentRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateCustomEnvironmentRequestBody | undefined;
};
export type CreateCustomEnvironmentResponseBody = {};
/** @internal */
export declare const CreateCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof CreateCustomEnvironmentType>;
/** @internal */
export declare const CreateCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof CreateCustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCustomEnvironmentType$ {
    /** @deprecated use `CreateCustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Equals: "equals";
        readonly StartsWith: "startsWith";
        readonly EndsWith: "endsWith";
    }>;
    /** @deprecated use `CreateCustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Equals: "equals";
        readonly StartsWith: "startsWith";
        readonly EndsWith: "endsWith";
    }>;
}
/** @internal */
export declare const BranchMatcher$inboundSchema: z.ZodType<BranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type BranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const BranchMatcher$outboundSchema: z.ZodType<BranchMatcher$Outbound, z.ZodTypeDef, BranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BranchMatcher$ {
    /** @deprecated use `BranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `BranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BranchMatcher$Outbound, z.ZodTypeDef, BranchMatcher>;
    /** @deprecated use `BranchMatcher$Outbound` instead. */
    type Outbound = BranchMatcher$Outbound;
}
export declare function branchMatcherToJSON(branchMatcher: BranchMatcher): string;
export declare function branchMatcherFromJSON(jsonString: string): SafeParseResult<BranchMatcher, SDKValidationError>;
/** @internal */
export declare const CreateCustomEnvironmentRequestBody$inboundSchema: z.ZodType<CreateCustomEnvironmentRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCustomEnvironmentRequestBody$Outbound = {
    slug?: string | undefined;
    description?: string | undefined;
    branchMatcher?: BranchMatcher$Outbound | undefined;
    copyEnvVarsFrom?: string | undefined;
};
/** @internal */
export declare const CreateCustomEnvironmentRequestBody$outboundSchema: z.ZodType<CreateCustomEnvironmentRequestBody$Outbound, z.ZodTypeDef, CreateCustomEnvironmentRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCustomEnvironmentRequestBody$ {
    /** @deprecated use `CreateCustomEnvironmentRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCustomEnvironmentRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCustomEnvironmentRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCustomEnvironmentRequestBody$Outbound, z.ZodTypeDef, CreateCustomEnvironmentRequestBody>;
    /** @deprecated use `CreateCustomEnvironmentRequestBody$Outbound` instead. */
    type Outbound = CreateCustomEnvironmentRequestBody$Outbound;
}
export declare function createCustomEnvironmentRequestBodyToJSON(createCustomEnvironmentRequestBody: CreateCustomEnvironmentRequestBody): string;
export declare function createCustomEnvironmentRequestBodyFromJSON(jsonString: string): SafeParseResult<CreateCustomEnvironmentRequestBody, SDKValidationError>;
/** @internal */
export declare const CreateCustomEnvironmentRequest$inboundSchema: z.ZodType<CreateCustomEnvironmentRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCustomEnvironmentRequest$Outbound = {
    idOrName: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: CreateCustomEnvironmentRequestBody$Outbound | undefined;
};
/** @internal */
export declare const CreateCustomEnvironmentRequest$outboundSchema: z.ZodType<CreateCustomEnvironmentRequest$Outbound, z.ZodTypeDef, CreateCustomEnvironmentRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCustomEnvironmentRequest$ {
    /** @deprecated use `CreateCustomEnvironmentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCustomEnvironmentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCustomEnvironmentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCustomEnvironmentRequest$Outbound, z.ZodTypeDef, CreateCustomEnvironmentRequest>;
    /** @deprecated use `CreateCustomEnvironmentRequest$Outbound` instead. */
    type Outbound = CreateCustomEnvironmentRequest$Outbound;
}
export declare function createCustomEnvironmentRequestToJSON(createCustomEnvironmentRequest: CreateCustomEnvironmentRequest): string;
export declare function createCustomEnvironmentRequestFromJSON(jsonString: string): SafeParseResult<CreateCustomEnvironmentRequest, SDKValidationError>;
/** @internal */
export declare const CreateCustomEnvironmentResponseBody$inboundSchema: z.ZodType<CreateCustomEnvironmentResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateCustomEnvironmentResponseBody$Outbound = {};
/** @internal */
export declare const CreateCustomEnvironmentResponseBody$outboundSchema: z.ZodType<CreateCustomEnvironmentResponseBody$Outbound, z.ZodTypeDef, CreateCustomEnvironmentResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateCustomEnvironmentResponseBody$ {
    /** @deprecated use `CreateCustomEnvironmentResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCustomEnvironmentResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCustomEnvironmentResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCustomEnvironmentResponseBody$Outbound, z.ZodTypeDef, CreateCustomEnvironmentResponseBody>;
    /** @deprecated use `CreateCustomEnvironmentResponseBody$Outbound` instead. */
    type Outbound = CreateCustomEnvironmentResponseBody$Outbound;
}
export declare function createCustomEnvironmentResponseBodyToJSON(createCustomEnvironmentResponseBody: CreateCustomEnvironmentResponseBody): string;
export declare function createCustomEnvironmentResponseBodyFromJSON(jsonString: string): SafeParseResult<CreateCustomEnvironmentResponseBody, SDKValidationError>;
//# sourceMappingURL=createcustomenvironmentop.d.ts.map