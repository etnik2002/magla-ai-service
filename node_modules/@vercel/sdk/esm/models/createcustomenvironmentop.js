/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export const CreateCustomEnvironmentType = {
    Equals: "equals",
    StartsWith: "startsWith",
    EndsWith: "endsWith",
};
/** @internal */
export const CreateCustomEnvironmentType$inboundSchema = z.nativeEnum(CreateCustomEnvironmentType);
/** @internal */
export const CreateCustomEnvironmentType$outboundSchema = CreateCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentType$;
(function (CreateCustomEnvironmentType$) {
    /** @deprecated use `CreateCustomEnvironmentType$inboundSchema` instead. */
    CreateCustomEnvironmentType$.inboundSchema = CreateCustomEnvironmentType$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentType$outboundSchema` instead. */
    CreateCustomEnvironmentType$.outboundSchema = CreateCustomEnvironmentType$outboundSchema;
})(CreateCustomEnvironmentType$ || (CreateCustomEnvironmentType$ = {}));
/** @internal */
export const BranchMatcher$inboundSchema = z.object({
    type: CreateCustomEnvironmentType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const BranchMatcher$outboundSchema = z.object({
    type: CreateCustomEnvironmentType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BranchMatcher$;
(function (BranchMatcher$) {
    /** @deprecated use `BranchMatcher$inboundSchema` instead. */
    BranchMatcher$.inboundSchema = BranchMatcher$inboundSchema;
    /** @deprecated use `BranchMatcher$outboundSchema` instead. */
    BranchMatcher$.outboundSchema = BranchMatcher$outboundSchema;
})(BranchMatcher$ || (BranchMatcher$ = {}));
export function branchMatcherToJSON(branchMatcher) {
    return JSON.stringify(BranchMatcher$outboundSchema.parse(branchMatcher));
}
export function branchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BranchMatcher' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentRequestBody$inboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.lazy(() => BranchMatcher$inboundSchema).optional(),
    copyEnvVarsFrom: z.string().optional(),
});
/** @internal */
export const CreateCustomEnvironmentRequestBody$outboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.lazy(() => BranchMatcher$outboundSchema).optional(),
    copyEnvVarsFrom: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentRequestBody$;
(function (CreateCustomEnvironmentRequestBody$) {
    /** @deprecated use `CreateCustomEnvironmentRequestBody$inboundSchema` instead. */
    CreateCustomEnvironmentRequestBody$.inboundSchema = CreateCustomEnvironmentRequestBody$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentRequestBody$outboundSchema` instead. */
    CreateCustomEnvironmentRequestBody$.outboundSchema = CreateCustomEnvironmentRequestBody$outboundSchema;
})(CreateCustomEnvironmentRequestBody$ || (CreateCustomEnvironmentRequestBody$ = {}));
export function createCustomEnvironmentRequestBodyToJSON(createCustomEnvironmentRequestBody) {
    return JSON.stringify(CreateCustomEnvironmentRequestBody$outboundSchema.parse(createCustomEnvironmentRequestBody));
}
export function createCustomEnvironmentRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentRequestBody' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateCustomEnvironmentRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentRequest$;
(function (CreateCustomEnvironmentRequest$) {
    /** @deprecated use `CreateCustomEnvironmentRequest$inboundSchema` instead. */
    CreateCustomEnvironmentRequest$.inboundSchema = CreateCustomEnvironmentRequest$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentRequest$outboundSchema` instead. */
    CreateCustomEnvironmentRequest$.outboundSchema = CreateCustomEnvironmentRequest$outboundSchema;
})(CreateCustomEnvironmentRequest$ || (CreateCustomEnvironmentRequest$ = {}));
export function createCustomEnvironmentRequestToJSON(createCustomEnvironmentRequest) {
    return JSON.stringify(CreateCustomEnvironmentRequest$outboundSchema.parse(createCustomEnvironmentRequest));
}
export function createCustomEnvironmentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentRequest' from JSON`);
}
/** @internal */
export const CreateCustomEnvironmentResponseBody$inboundSchema = z.object({});
/** @internal */
export const CreateCustomEnvironmentResponseBody$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateCustomEnvironmentResponseBody$;
(function (CreateCustomEnvironmentResponseBody$) {
    /** @deprecated use `CreateCustomEnvironmentResponseBody$inboundSchema` instead. */
    CreateCustomEnvironmentResponseBody$.inboundSchema = CreateCustomEnvironmentResponseBody$inboundSchema;
    /** @deprecated use `CreateCustomEnvironmentResponseBody$outboundSchema` instead. */
    CreateCustomEnvironmentResponseBody$.outboundSchema = CreateCustomEnvironmentResponseBody$outboundSchema;
})(CreateCustomEnvironmentResponseBody$ || (CreateCustomEnvironmentResponseBody$ = {}));
export function createCustomEnvironmentResponseBodyToJSON(createCustomEnvironmentResponseBody) {
    return JSON.stringify(CreateCustomEnvironmentResponseBody$outboundSchema.parse(createCustomEnvironmentResponseBody));
}
export function createCustomEnvironmentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateCustomEnvironmentResponseBody' from JSON`);
}
//# sourceMappingURL=createcustomenvironmentop.js.map