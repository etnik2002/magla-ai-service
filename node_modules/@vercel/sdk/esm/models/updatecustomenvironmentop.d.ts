import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export declare const UpdateCustomEnvironmentType: {
    readonly Equals: "equals";
    readonly StartsWith: "startsWith";
    readonly EndsWith: "endsWith";
};
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export type UpdateCustomEnvironmentType = ClosedEnum<typeof UpdateCustomEnvironmentType>;
/**
 * How we want to determine a matching branch. This is optional.
 */
export type UpdateCustomEnvironmentBranchMatcher = {
    /**
     * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
     */
    type: UpdateCustomEnvironmentType;
    /**
     * Git branch name or portion thereof.
     */
    pattern: string;
};
export type UpdateCustomEnvironmentRequestBody = {
    /**
     * The slug of the custom environment.
     */
    slug?: string | undefined;
    /**
     * Description of the custom environment. This is optional.
     */
    description?: string | undefined;
    /**
     * How we want to determine a matching branch. This is optional.
     */
    branchMatcher?: UpdateCustomEnvironmentBranchMatcher | null | undefined;
};
export type UpdateCustomEnvironmentRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The unique custom environment identifier within the project
     */
    environmentSlugOrId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UpdateCustomEnvironmentRequestBody | undefined;
};
export type UpdateCustomEnvironmentResponseBody = {};
/** @internal */
export declare const UpdateCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<typeof UpdateCustomEnvironmentType>;
/** @internal */
export declare const UpdateCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<typeof UpdateCustomEnvironmentType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCustomEnvironmentType$ {
    /** @deprecated use `UpdateCustomEnvironmentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Equals: "equals";
        readonly StartsWith: "startsWith";
        readonly EndsWith: "endsWith";
    }>;
    /** @deprecated use `UpdateCustomEnvironmentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Equals: "equals";
        readonly StartsWith: "startsWith";
        readonly EndsWith: "endsWith";
    }>;
}
/** @internal */
export declare const UpdateCustomEnvironmentBranchMatcher$inboundSchema: z.ZodType<UpdateCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCustomEnvironmentBranchMatcher$Outbound = {
    type: string;
    pattern: string;
};
/** @internal */
export declare const UpdateCustomEnvironmentBranchMatcher$outboundSchema: z.ZodType<UpdateCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentBranchMatcher>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCustomEnvironmentBranchMatcher$ {
    /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCustomEnvironmentBranchMatcher, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCustomEnvironmentBranchMatcher$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentBranchMatcher>;
    /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$Outbound` instead. */
    type Outbound = UpdateCustomEnvironmentBranchMatcher$Outbound;
}
export declare function updateCustomEnvironmentBranchMatcherToJSON(updateCustomEnvironmentBranchMatcher: UpdateCustomEnvironmentBranchMatcher): string;
export declare function updateCustomEnvironmentBranchMatcherFromJSON(jsonString: string): SafeParseResult<UpdateCustomEnvironmentBranchMatcher, SDKValidationError>;
/** @internal */
export declare const UpdateCustomEnvironmentRequestBody$inboundSchema: z.ZodType<UpdateCustomEnvironmentRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCustomEnvironmentRequestBody$Outbound = {
    slug?: string | undefined;
    description?: string | undefined;
    branchMatcher?: UpdateCustomEnvironmentBranchMatcher$Outbound | null | undefined;
};
/** @internal */
export declare const UpdateCustomEnvironmentRequestBody$outboundSchema: z.ZodType<UpdateCustomEnvironmentRequestBody$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCustomEnvironmentRequestBody$ {
    /** @deprecated use `UpdateCustomEnvironmentRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCustomEnvironmentRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCustomEnvironmentRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCustomEnvironmentRequestBody$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentRequestBody>;
    /** @deprecated use `UpdateCustomEnvironmentRequestBody$Outbound` instead. */
    type Outbound = UpdateCustomEnvironmentRequestBody$Outbound;
}
export declare function updateCustomEnvironmentRequestBodyToJSON(updateCustomEnvironmentRequestBody: UpdateCustomEnvironmentRequestBody): string;
export declare function updateCustomEnvironmentRequestBodyFromJSON(jsonString: string): SafeParseResult<UpdateCustomEnvironmentRequestBody, SDKValidationError>;
/** @internal */
export declare const UpdateCustomEnvironmentRequest$inboundSchema: z.ZodType<UpdateCustomEnvironmentRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCustomEnvironmentRequest$Outbound = {
    idOrName: string;
    environmentSlugOrId: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: UpdateCustomEnvironmentRequestBody$Outbound | undefined;
};
/** @internal */
export declare const UpdateCustomEnvironmentRequest$outboundSchema: z.ZodType<UpdateCustomEnvironmentRequest$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCustomEnvironmentRequest$ {
    /** @deprecated use `UpdateCustomEnvironmentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCustomEnvironmentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCustomEnvironmentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCustomEnvironmentRequest$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentRequest>;
    /** @deprecated use `UpdateCustomEnvironmentRequest$Outbound` instead. */
    type Outbound = UpdateCustomEnvironmentRequest$Outbound;
}
export declare function updateCustomEnvironmentRequestToJSON(updateCustomEnvironmentRequest: UpdateCustomEnvironmentRequest): string;
export declare function updateCustomEnvironmentRequestFromJSON(jsonString: string): SafeParseResult<UpdateCustomEnvironmentRequest, SDKValidationError>;
/** @internal */
export declare const UpdateCustomEnvironmentResponseBody$inboundSchema: z.ZodType<UpdateCustomEnvironmentResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateCustomEnvironmentResponseBody$Outbound = {};
/** @internal */
export declare const UpdateCustomEnvironmentResponseBody$outboundSchema: z.ZodType<UpdateCustomEnvironmentResponseBody$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateCustomEnvironmentResponseBody$ {
    /** @deprecated use `UpdateCustomEnvironmentResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateCustomEnvironmentResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateCustomEnvironmentResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateCustomEnvironmentResponseBody$Outbound, z.ZodTypeDef, UpdateCustomEnvironmentResponseBody>;
    /** @deprecated use `UpdateCustomEnvironmentResponseBody$Outbound` instead. */
    type Outbound = UpdateCustomEnvironmentResponseBody$Outbound;
}
export declare function updateCustomEnvironmentResponseBodyToJSON(updateCustomEnvironmentResponseBody: UpdateCustomEnvironmentResponseBody): string;
export declare function updateCustomEnvironmentResponseBodyFromJSON(jsonString: string): SafeParseResult<UpdateCustomEnvironmentResponseBody, SDKValidationError>;
//# sourceMappingURL=updatecustomenvironmentop.d.ts.map