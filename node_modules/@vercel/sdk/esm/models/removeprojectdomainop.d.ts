import * as z from "zod";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type RemoveProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The project domain name
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * The domain was succesfully removed from the project
 */
export type RemoveProjectDomainResponseBody = {};
/** @internal */
export declare const RemoveProjectDomainRequest$inboundSchema: z.ZodType<RemoveProjectDomainRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoveProjectDomainRequest$Outbound = {
    idOrName: string;
    domain: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const RemoveProjectDomainRequest$outboundSchema: z.ZodType<RemoveProjectDomainRequest$Outbound, z.ZodTypeDef, RemoveProjectDomainRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoveProjectDomainRequest$ {
    /** @deprecated use `RemoveProjectDomainRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoveProjectDomainRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoveProjectDomainRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoveProjectDomainRequest$Outbound, z.ZodTypeDef, RemoveProjectDomainRequest>;
    /** @deprecated use `RemoveProjectDomainRequest$Outbound` instead. */
    type Outbound = RemoveProjectDomainRequest$Outbound;
}
export declare function removeProjectDomainRequestToJSON(removeProjectDomainRequest: RemoveProjectDomainRequest): string;
export declare function removeProjectDomainRequestFromJSON(jsonString: string): SafeParseResult<RemoveProjectDomainRequest, SDKValidationError>;
/** @internal */
export declare const RemoveProjectDomainResponseBody$inboundSchema: z.ZodType<RemoveProjectDomainResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type RemoveProjectDomainResponseBody$Outbound = {};
/** @internal */
export declare const RemoveProjectDomainResponseBody$outboundSchema: z.ZodType<RemoveProjectDomainResponseBody$Outbound, z.ZodTypeDef, RemoveProjectDomainResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RemoveProjectDomainResponseBody$ {
    /** @deprecated use `RemoveProjectDomainResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RemoveProjectDomainResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `RemoveProjectDomainResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RemoveProjectDomainResponseBody$Outbound, z.ZodTypeDef, RemoveProjectDomainResponseBody>;
    /** @deprecated use `RemoveProjectDomainResponseBody$Outbound` instead. */
    type Outbound = RemoveProjectDomainResponseBody$Outbound;
}
export declare function removeProjectDomainResponseBodyToJSON(removeProjectDomainResponseBody: RemoveProjectDomainResponseBody): string;
export declare function removeProjectDomainResponseBodyFromJSON(jsonString: string): SafeParseResult<RemoveProjectDomainResponseBody, SDKValidationError>;
//# sourceMappingURL=removeprojectdomainop.d.ts.map