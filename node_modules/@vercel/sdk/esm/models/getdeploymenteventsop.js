/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
/**
 * Order of the returned events based on the timestamp.
 */
export const Direction = {
    Backward: "backward",
    Forward: "forward",
};
/** @internal */
export const Direction$inboundSchema = z
    .nativeEnum(Direction);
/** @internal */
export const Direction$outboundSchema = Direction$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Direction$;
(function (Direction$) {
    /** @deprecated use `Direction$inboundSchema` instead. */
    Direction$.inboundSchema = Direction$inboundSchema;
    /** @deprecated use `Direction$outboundSchema` instead. */
    Direction$.outboundSchema = Direction$outboundSchema;
})(Direction$ || (Direction$ = {}));
/** @internal */
export const StatusCode$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
export const StatusCode$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var StatusCode$;
(function (StatusCode$) {
    /** @deprecated use `StatusCode$inboundSchema` instead. */
    StatusCode$.inboundSchema = StatusCode$inboundSchema;
    /** @deprecated use `StatusCode$outboundSchema` instead. */
    StatusCode$.outboundSchema = StatusCode$outboundSchema;
})(StatusCode$ || (StatusCode$ = {}));
export function statusCodeToJSON(statusCode) {
    return JSON.stringify(StatusCode$outboundSchema.parse(statusCode));
}
export function statusCodeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => StatusCode$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'StatusCode' from JSON`);
}
/** @internal */
export const GetDeploymentEventsRequest$inboundSchema = z.object({
    idOrUrl: z.string(),
    direction: Direction$inboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetDeploymentEventsRequest$outboundSchema = z.object({
    idOrUrl: z.string(),
    direction: Direction$outboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetDeploymentEventsRequest$;
(function (GetDeploymentEventsRequest$) {
    /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
    GetDeploymentEventsRequest$.inboundSchema = GetDeploymentEventsRequest$inboundSchema;
    /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
    GetDeploymentEventsRequest$.outboundSchema = GetDeploymentEventsRequest$outboundSchema;
})(GetDeploymentEventsRequest$ || (GetDeploymentEventsRequest$ = {}));
export function getDeploymentEventsRequestToJSON(getDeploymentEventsRequest) {
    return JSON.stringify(GetDeploymentEventsRequest$outboundSchema.parse(getDeploymentEventsRequest));
}
export function getDeploymentEventsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetDeploymentEventsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetDeploymentEventsRequest' from JSON`);
}
//# sourceMappingURL=getdeploymenteventsop.js.map