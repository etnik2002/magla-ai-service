import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Order of the returned events based on the timestamp.
 */
export declare const Direction: {
    readonly Backward: "backward";
    readonly Forward: "forward";
};
/**
 * Order of the returned events based on the timestamp.
 */
export type Direction = ClosedEnum<typeof Direction>;
/**
 * HTTP status code range to filter events by.
 */
export type StatusCode = number | string;
export type GetDeploymentEventsRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Order of the returned events based on the timestamp.
     */
    direction?: Direction | undefined;
    /**
     * When enabled, this endpoint will return live events as they happen.
     */
    follow?: number | undefined;
    /**
     * Maximum number of events to return. Provide `-1` to return all available logs.
     */
    limit?: number | undefined;
    /**
     * Deployment build ID.
     */
    name?: string | undefined;
    /**
     * Timestamp for when build logs should be pulled from.
     */
    since?: number | undefined;
    /**
     * Timestamp for when the build logs should be pulled up until.
     */
    until?: number | undefined;
    /**
     * HTTP status code range to filter events by.
     */
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/** @internal */
export declare const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction>;
/** @internal */
export declare const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Direction$ {
    /** @deprecated use `Direction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Backward: "backward";
        readonly Forward: "forward";
    }>;
    /** @deprecated use `Direction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Backward: "backward";
        readonly Forward: "forward";
    }>;
}
/** @internal */
export declare const StatusCode$inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown>;
/** @internal */
export type StatusCode$Outbound = number | string;
/** @internal */
export declare const StatusCode$outboundSchema: z.ZodType<StatusCode$Outbound, z.ZodTypeDef, StatusCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace StatusCode$ {
    /** @deprecated use `StatusCode$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown>;
    /** @deprecated use `StatusCode$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StatusCode$Outbound, z.ZodTypeDef, StatusCode>;
    /** @deprecated use `StatusCode$Outbound` instead. */
    type Outbound = StatusCode$Outbound;
}
export declare function statusCodeToJSON(statusCode: StatusCode): string;
export declare function statusCodeFromJSON(jsonString: string): SafeParseResult<StatusCode, SDKValidationError>;
/** @internal */
export declare const GetDeploymentEventsRequest$inboundSchema: z.ZodType<GetDeploymentEventsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetDeploymentEventsRequest$Outbound = {
    idOrUrl: string;
    direction: string;
    follow?: number | undefined;
    limit?: number | undefined;
    name?: string | undefined;
    since?: number | undefined;
    until?: number | undefined;
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetDeploymentEventsRequest$outboundSchema: z.ZodType<GetDeploymentEventsRequest$Outbound, z.ZodTypeDef, GetDeploymentEventsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetDeploymentEventsRequest$ {
    /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDeploymentEventsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDeploymentEventsRequest$Outbound, z.ZodTypeDef, GetDeploymentEventsRequest>;
    /** @deprecated use `GetDeploymentEventsRequest$Outbound` instead. */
    type Outbound = GetDeploymentEventsRequest$Outbound;
}
export declare function getDeploymentEventsRequestToJSON(getDeploymentEventsRequest: GetDeploymentEventsRequest): string;
export declare function getDeploymentEventsRequestFromJSON(jsonString: string): SafeParseResult<GetDeploymentEventsRequest, SDKValidationError>;
//# sourceMappingURL=getdeploymenteventsop.d.ts.map