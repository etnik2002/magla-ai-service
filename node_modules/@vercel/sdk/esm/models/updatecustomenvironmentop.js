/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export const UpdateCustomEnvironmentType = {
    Equals: "equals",
    StartsWith: "startsWith",
    EndsWith: "endsWith",
};
/** @internal */
export const UpdateCustomEnvironmentType$inboundSchema = z.nativeEnum(UpdateCustomEnvironmentType);
/** @internal */
export const UpdateCustomEnvironmentType$outboundSchema = UpdateCustomEnvironmentType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCustomEnvironmentType$;
(function (UpdateCustomEnvironmentType$) {
    /** @deprecated use `UpdateCustomEnvironmentType$inboundSchema` instead. */
    UpdateCustomEnvironmentType$.inboundSchema = UpdateCustomEnvironmentType$inboundSchema;
    /** @deprecated use `UpdateCustomEnvironmentType$outboundSchema` instead. */
    UpdateCustomEnvironmentType$.outboundSchema = UpdateCustomEnvironmentType$outboundSchema;
})(UpdateCustomEnvironmentType$ || (UpdateCustomEnvironmentType$ = {}));
/** @internal */
export const UpdateCustomEnvironmentBranchMatcher$inboundSchema = z.object({
    type: UpdateCustomEnvironmentType$inboundSchema,
    pattern: z.string(),
});
/** @internal */
export const UpdateCustomEnvironmentBranchMatcher$outboundSchema = z.object({
    type: UpdateCustomEnvironmentType$outboundSchema,
    pattern: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCustomEnvironmentBranchMatcher$;
(function (UpdateCustomEnvironmentBranchMatcher$) {
    /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$inboundSchema` instead. */
    UpdateCustomEnvironmentBranchMatcher$.inboundSchema = UpdateCustomEnvironmentBranchMatcher$inboundSchema;
    /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$outboundSchema` instead. */
    UpdateCustomEnvironmentBranchMatcher$.outboundSchema = UpdateCustomEnvironmentBranchMatcher$outboundSchema;
})(UpdateCustomEnvironmentBranchMatcher$ || (UpdateCustomEnvironmentBranchMatcher$ = {}));
export function updateCustomEnvironmentBranchMatcherToJSON(updateCustomEnvironmentBranchMatcher) {
    return JSON.stringify(UpdateCustomEnvironmentBranchMatcher$outboundSchema.parse(updateCustomEnvironmentBranchMatcher));
}
export function updateCustomEnvironmentBranchMatcherFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCustomEnvironmentBranchMatcher' from JSON`);
}
/** @internal */
export const UpdateCustomEnvironmentRequestBody$inboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.nullable(z.lazy(() => UpdateCustomEnvironmentBranchMatcher$inboundSchema)).optional(),
});
/** @internal */
export const UpdateCustomEnvironmentRequestBody$outboundSchema = z.object({
    slug: z.string().optional(),
    description: z.string().optional(),
    branchMatcher: z.nullable(z.lazy(() => UpdateCustomEnvironmentBranchMatcher$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCustomEnvironmentRequestBody$;
(function (UpdateCustomEnvironmentRequestBody$) {
    /** @deprecated use `UpdateCustomEnvironmentRequestBody$inboundSchema` instead. */
    UpdateCustomEnvironmentRequestBody$.inboundSchema = UpdateCustomEnvironmentRequestBody$inboundSchema;
    /** @deprecated use `UpdateCustomEnvironmentRequestBody$outboundSchema` instead. */
    UpdateCustomEnvironmentRequestBody$.outboundSchema = UpdateCustomEnvironmentRequestBody$outboundSchema;
})(UpdateCustomEnvironmentRequestBody$ || (UpdateCustomEnvironmentRequestBody$ = {}));
export function updateCustomEnvironmentRequestBodyToJSON(updateCustomEnvironmentRequestBody) {
    return JSON.stringify(UpdateCustomEnvironmentRequestBody$outboundSchema.parse(updateCustomEnvironmentRequestBody));
}
export function updateCustomEnvironmentRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCustomEnvironmentRequestBody' from JSON`);
}
/** @internal */
export const UpdateCustomEnvironmentRequest$inboundSchema = z.object({
    idOrName: z.string(),
    environmentSlugOrId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateCustomEnvironmentRequestBody$inboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateCustomEnvironmentRequest$outboundSchema = z.object({
    idOrName: z.string(),
    environmentSlugOrId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateCustomEnvironmentRequestBody$outboundSchema)
        .optional(),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCustomEnvironmentRequest$;
(function (UpdateCustomEnvironmentRequest$) {
    /** @deprecated use `UpdateCustomEnvironmentRequest$inboundSchema` instead. */
    UpdateCustomEnvironmentRequest$.inboundSchema = UpdateCustomEnvironmentRequest$inboundSchema;
    /** @deprecated use `UpdateCustomEnvironmentRequest$outboundSchema` instead. */
    UpdateCustomEnvironmentRequest$.outboundSchema = UpdateCustomEnvironmentRequest$outboundSchema;
})(UpdateCustomEnvironmentRequest$ || (UpdateCustomEnvironmentRequest$ = {}));
export function updateCustomEnvironmentRequestToJSON(updateCustomEnvironmentRequest) {
    return JSON.stringify(UpdateCustomEnvironmentRequest$outboundSchema.parse(updateCustomEnvironmentRequest));
}
export function updateCustomEnvironmentRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCustomEnvironmentRequest' from JSON`);
}
/** @internal */
export const UpdateCustomEnvironmentResponseBody$inboundSchema = z.object({});
/** @internal */
export const UpdateCustomEnvironmentResponseBody$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateCustomEnvironmentResponseBody$;
(function (UpdateCustomEnvironmentResponseBody$) {
    /** @deprecated use `UpdateCustomEnvironmentResponseBody$inboundSchema` instead. */
    UpdateCustomEnvironmentResponseBody$.inboundSchema = UpdateCustomEnvironmentResponseBody$inboundSchema;
    /** @deprecated use `UpdateCustomEnvironmentResponseBody$outboundSchema` instead. */
    UpdateCustomEnvironmentResponseBody$.outboundSchema = UpdateCustomEnvironmentResponseBody$outboundSchema;
})(UpdateCustomEnvironmentResponseBody$ || (UpdateCustomEnvironmentResponseBody$ = {}));
export function updateCustomEnvironmentResponseBodyToJSON(updateCustomEnvironmentResponseBody) {
    return JSON.stringify(UpdateCustomEnvironmentResponseBody$outboundSchema.parse(updateCustomEnvironmentResponseBody));
}
export function updateCustomEnvironmentResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateCustomEnvironmentResponseBody' from JSON`);
}
//# sourceMappingURL=updatecustomenvironmentop.js.map