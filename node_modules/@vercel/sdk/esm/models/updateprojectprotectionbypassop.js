/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const UpdateProjectProtectionBypassScope = {
    AutomationBypass: "automation-bypass",
};
/** @internal */
export const Revoke$inboundSchema = z
    .object({
    secret: z.string(),
    regenerate: z.boolean(),
});
/** @internal */
export const Revoke$outboundSchema = z.object({
    secret: z.string(),
    regenerate: z.boolean(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Revoke$;
(function (Revoke$) {
    /** @deprecated use `Revoke$inboundSchema` instead. */
    Revoke$.inboundSchema = Revoke$inboundSchema;
    /** @deprecated use `Revoke$outboundSchema` instead. */
    Revoke$.outboundSchema = Revoke$outboundSchema;
})(Revoke$ || (Revoke$ = {}));
export function revokeToJSON(revoke) {
    return JSON.stringify(Revoke$outboundSchema.parse(revoke));
}
export function revokeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Revoke$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Revoke' from JSON`);
}
/** @internal */
export const Generate$inboundSchema = z.object({
    secret: z.string().optional(),
});
/** @internal */
export const Generate$outboundSchema = z.object({
    secret: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Generate$;
(function (Generate$) {
    /** @deprecated use `Generate$inboundSchema` instead. */
    Generate$.inboundSchema = Generate$inboundSchema;
    /** @deprecated use `Generate$outboundSchema` instead. */
    Generate$.outboundSchema = Generate$outboundSchema;
})(Generate$ || (Generate$ = {}));
export function generateToJSON(generate) {
    return JSON.stringify(Generate$outboundSchema.parse(generate));
}
export function generateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Generate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Generate' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassRequestBody$inboundSchema = z.object({
    revoke: z.lazy(() => Revoke$inboundSchema).optional(),
    generate: z.lazy(() => Generate$inboundSchema).optional(),
});
/** @internal */
export const UpdateProjectProtectionBypassRequestBody$outboundSchema = z.object({
    revoke: z.lazy(() => Revoke$outboundSchema).optional(),
    generate: z.lazy(() => Generate$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassRequestBody$;
(function (UpdateProjectProtectionBypassRequestBody$) {
    /** @deprecated use `UpdateProjectProtectionBypassRequestBody$inboundSchema` instead. */
    UpdateProjectProtectionBypassRequestBody$.inboundSchema = UpdateProjectProtectionBypassRequestBody$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassRequestBody$outboundSchema` instead. */
    UpdateProjectProtectionBypassRequestBody$.outboundSchema = UpdateProjectProtectionBypassRequestBody$outboundSchema;
})(UpdateProjectProtectionBypassRequestBody$ || (UpdateProjectProtectionBypassRequestBody$ = {}));
export function updateProjectProtectionBypassRequestBodyToJSON(updateProjectProtectionBypassRequestBody) {
    return JSON.stringify(UpdateProjectProtectionBypassRequestBody$outboundSchema.parse(updateProjectProtectionBypassRequestBody));
}
export function updateProjectProtectionBypassRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypassRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypassRequestBody' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassRequest$inboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateProjectProtectionBypassRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateProjectProtectionBypassRequest$outboundSchema = z.object({
    idOrName: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateProjectProtectionBypassRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassRequest$;
(function (UpdateProjectProtectionBypassRequest$) {
    /** @deprecated use `UpdateProjectProtectionBypassRequest$inboundSchema` instead. */
    UpdateProjectProtectionBypassRequest$.inboundSchema = UpdateProjectProtectionBypassRequest$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassRequest$outboundSchema` instead. */
    UpdateProjectProtectionBypassRequest$.outboundSchema = UpdateProjectProtectionBypassRequest$outboundSchema;
})(UpdateProjectProtectionBypassRequest$ || (UpdateProjectProtectionBypassRequest$ = {}));
export function updateProjectProtectionBypassRequestToJSON(updateProjectProtectionBypassRequest) {
    return JSON.stringify(UpdateProjectProtectionBypassRequest$outboundSchema.parse(updateProjectProtectionBypassRequest));
}
export function updateProjectProtectionBypassRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypassRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypassRequest' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassScope$inboundSchema = z.nativeEnum(UpdateProjectProtectionBypassScope);
/** @internal */
export const UpdateProjectProtectionBypassScope$outboundSchema = UpdateProjectProtectionBypassScope$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassScope$;
(function (UpdateProjectProtectionBypassScope$) {
    /** @deprecated use `UpdateProjectProtectionBypassScope$inboundSchema` instead. */
    UpdateProjectProtectionBypassScope$.inboundSchema = UpdateProjectProtectionBypassScope$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassScope$outboundSchema` instead. */
    UpdateProjectProtectionBypassScope$.outboundSchema = UpdateProjectProtectionBypassScope$outboundSchema;
})(UpdateProjectProtectionBypassScope$ || (UpdateProjectProtectionBypassScope$ = {}));
/** @internal */
export const UpdateProjectProtectionBypassProtectionBypass$inboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassScope$inboundSchema,
});
/** @internal */
export const UpdateProjectProtectionBypassProtectionBypass$outboundSchema = z.object({
    createdAt: z.number(),
    createdBy: z.string(),
    scope: UpdateProjectProtectionBypassScope$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassProtectionBypass$;
(function (UpdateProjectProtectionBypassProtectionBypass$) {
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass$inboundSchema` instead. */
    UpdateProjectProtectionBypassProtectionBypass$.inboundSchema = UpdateProjectProtectionBypassProtectionBypass$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassProtectionBypass$outboundSchema` instead. */
    UpdateProjectProtectionBypassProtectionBypass$.outboundSchema = UpdateProjectProtectionBypassProtectionBypass$outboundSchema;
})(UpdateProjectProtectionBypassProtectionBypass$ || (UpdateProjectProtectionBypassProtectionBypass$ = {}));
export function updateProjectProtectionBypassProtectionBypassToJSON(updateProjectProtectionBypassProtectionBypass) {
    return JSON.stringify(UpdateProjectProtectionBypassProtectionBypass$outboundSchema.parse(updateProjectProtectionBypassProtectionBypass));
}
export function updateProjectProtectionBypassProtectionBypassFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypassProtectionBypass$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypassProtectionBypass' from JSON`);
}
/** @internal */
export const UpdateProjectProtectionBypassResponseBody$inboundSchema = z.object({
    protectionBypass: z.record(z.lazy(() => UpdateProjectProtectionBypassProtectionBypass$inboundSchema)).optional(),
});
/** @internal */
export const UpdateProjectProtectionBypassResponseBody$outboundSchema = z.object({
    protectionBypass: z.record(z.lazy(() => UpdateProjectProtectionBypassProtectionBypass$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateProjectProtectionBypassResponseBody$;
(function (UpdateProjectProtectionBypassResponseBody$) {
    /** @deprecated use `UpdateProjectProtectionBypassResponseBody$inboundSchema` instead. */
    UpdateProjectProtectionBypassResponseBody$.inboundSchema = UpdateProjectProtectionBypassResponseBody$inboundSchema;
    /** @deprecated use `UpdateProjectProtectionBypassResponseBody$outboundSchema` instead. */
    UpdateProjectProtectionBypassResponseBody$.outboundSchema = UpdateProjectProtectionBypassResponseBody$outboundSchema;
})(UpdateProjectProtectionBypassResponseBody$ || (UpdateProjectProtectionBypassResponseBody$ = {}));
export function updateProjectProtectionBypassResponseBodyToJSON(updateProjectProtectionBypassResponseBody) {
    return JSON.stringify(UpdateProjectProtectionBypassResponseBody$outboundSchema.parse(updateProjectProtectionBypassResponseBody));
}
export function updateProjectProtectionBypassResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateProjectProtectionBypassResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateProjectProtectionBypassResponseBody' from JSON`);
}
//# sourceMappingURL=updateprojectprotectionbypassop.js.map